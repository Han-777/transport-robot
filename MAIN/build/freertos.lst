ARM GAS  C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"freertos.c"
  15              		.section	.rodata.str1.4,"aMS",%progbits,1
  16              		.align	2
  17              	.LC0:
  18 0000 64656661 		.ascii	"defaultTask\000"
  18      756C7454 
  18      61736B00 
  19              		.text
  20              	.Ltext0:
  21              		.cfi_sections	.debug_frame
  22              		.section	.text.StartDefaultTask,"ax",%progbits
  23              		.align	1
  24              		.global	StartDefaultTask
  25              		.syntax unified
  26              		.thumb
  27              		.thumb_func
  29              	StartDefaultTask:
  30              	.LFB153:
  31              		.file 1 "Core/Src/freertos.c"
   1:Core/Src/freertos.c **** /* USER CODE BEGIN Header */
   2:Core/Src/freertos.c **** /**
   3:Core/Src/freertos.c ****   ******************************************************************************
   4:Core/Src/freertos.c ****   * File Name          : freertos.c
   5:Core/Src/freertos.c ****   * Description        : Code for freertos applications
   6:Core/Src/freertos.c ****   ******************************************************************************
   7:Core/Src/freertos.c ****   * @attention
   8:Core/Src/freertos.c ****   *
   9:Core/Src/freertos.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/freertos.c ****   * All rights reserved.
  11:Core/Src/freertos.c ****   *
  12:Core/Src/freertos.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/freertos.c ****   * in the root directory of this software component.
  14:Core/Src/freertos.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/freertos.c ****   *
  16:Core/Src/freertos.c ****   ******************************************************************************
  17:Core/Src/freertos.c ****   */
  18:Core/Src/freertos.c **** /* USER CODE END Header */
  19:Core/Src/freertos.c **** 
  20:Core/Src/freertos.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/freertos.c **** #include "FreeRTOS.h"
  22:Core/Src/freertos.c **** #include "task.h"
  23:Core/Src/freertos.c **** #include "main.h"
  24:Core/Src/freertos.c **** #include "cmsis_os.h"
  25:Core/Src/freertos.c **** 
ARM GAS  C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s 			page 2


  26:Core/Src/freertos.c **** /* Private includes ----------------------------------------------------------*/
  27:Core/Src/freertos.c **** /* USER CODE BEGIN Includes */
  28:Core/Src/freertos.c **** 
  29:Core/Src/freertos.c **** /* USER CODE END Includes */
  30:Core/Src/freertos.c **** 
  31:Core/Src/freertos.c **** /* Private typedef -----------------------------------------------------------*/
  32:Core/Src/freertos.c **** /* USER CODE BEGIN PTD */
  33:Core/Src/freertos.c **** 
  34:Core/Src/freertos.c **** /* USER CODE END PTD */
  35:Core/Src/freertos.c **** 
  36:Core/Src/freertos.c **** /* Private define ------------------------------------------------------------*/
  37:Core/Src/freertos.c **** /* USER CODE BEGIN PD */
  38:Core/Src/freertos.c **** 
  39:Core/Src/freertos.c **** /* USER CODE END PD */
  40:Core/Src/freertos.c **** 
  41:Core/Src/freertos.c **** /* Private macro -------------------------------------------------------------*/
  42:Core/Src/freertos.c **** /* USER CODE BEGIN PM */
  43:Core/Src/freertos.c **** 
  44:Core/Src/freertos.c **** /* USER CODE END PM */
  45:Core/Src/freertos.c **** 
  46:Core/Src/freertos.c **** /* Private variables ---------------------------------------------------------*/
  47:Core/Src/freertos.c **** /* USER CODE BEGIN Variables */
  48:Core/Src/freertos.c **** 
  49:Core/Src/freertos.c **** /* USER CODE END Variables */
  50:Core/Src/freertos.c **** osThreadId defaultTaskHandle;
  51:Core/Src/freertos.c **** 
  52:Core/Src/freertos.c **** /* Private function prototypes -----------------------------------------------*/
  53:Core/Src/freertos.c **** /* USER CODE BEGIN FunctionPrototypes */
  54:Core/Src/freertos.c **** 
  55:Core/Src/freertos.c **** /* USER CODE END FunctionPrototypes */
  56:Core/Src/freertos.c **** 
  57:Core/Src/freertos.c **** void StartDefaultTask(void const * argument);
  58:Core/Src/freertos.c **** 
  59:Core/Src/freertos.c **** void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */
  60:Core/Src/freertos.c **** 
  61:Core/Src/freertos.c **** /* GetIdleTaskMemory prototype (linked to static allocation support) */
  62:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  63:Core/Src/freertos.c **** 
  64:Core/Src/freertos.c **** /* GetTimerTaskMemory prototype (linked to static allocation support) */
  65:Core/Src/freertos.c **** void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTa
  66:Core/Src/freertos.c **** 
  67:Core/Src/freertos.c **** /* Hook prototypes */
  68:Core/Src/freertos.c **** void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
  69:Core/Src/freertos.c **** 
  70:Core/Src/freertos.c **** /* USER CODE BEGIN 4 */
  71:Core/Src/freertos.c **** __weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
  72:Core/Src/freertos.c **** {
  73:Core/Src/freertos.c ****    /* Run time stack overflow checking is performed if
  74:Core/Src/freertos.c ****    configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
  75:Core/Src/freertos.c ****    called if a stack overflow is detected. */
  76:Core/Src/freertos.c **** }
  77:Core/Src/freertos.c **** /* USER CODE END 4 */
  78:Core/Src/freertos.c **** 
  79:Core/Src/freertos.c **** /* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
  80:Core/Src/freertos.c **** static StaticTask_t xIdleTaskTCBBuffer;
  81:Core/Src/freertos.c **** static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  82:Core/Src/freertos.c **** 
ARM GAS  C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s 			page 3


  83:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  84:Core/Src/freertos.c **** {
  85:Core/Src/freertos.c ****   *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  86:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
  87:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  88:Core/Src/freertos.c ****   /* place for user code */
  89:Core/Src/freertos.c **** }
  90:Core/Src/freertos.c **** /* USER CODE END GET_IDLE_TASK_MEMORY */
  91:Core/Src/freertos.c **** 
  92:Core/Src/freertos.c **** /* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
  93:Core/Src/freertos.c **** static StaticTask_t xTimerTaskTCBBuffer;
  94:Core/Src/freertos.c **** static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  95:Core/Src/freertos.c **** 
  96:Core/Src/freertos.c **** void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTa
  97:Core/Src/freertos.c **** {
  98:Core/Src/freertos.c ****   *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
  99:Core/Src/freertos.c ****   *ppxTimerTaskStackBuffer = &xTimerStack[0];
 100:Core/Src/freertos.c ****   *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 101:Core/Src/freertos.c ****   /* place for user code */
 102:Core/Src/freertos.c **** }
 103:Core/Src/freertos.c **** /* USER CODE END GET_TIMER_TASK_MEMORY */
 104:Core/Src/freertos.c **** 
 105:Core/Src/freertos.c **** /**
 106:Core/Src/freertos.c ****   * @brief  FreeRTOS initialization
 107:Core/Src/freertos.c ****   * @param  None
 108:Core/Src/freertos.c ****   * @retval None
 109:Core/Src/freertos.c ****   */
 110:Core/Src/freertos.c **** void MX_FREERTOS_Init(void) {
 111:Core/Src/freertos.c ****   /* USER CODE BEGIN Init */
 112:Core/Src/freertos.c **** 
 113:Core/Src/freertos.c ****   /* USER CODE END Init */
 114:Core/Src/freertos.c **** 
 115:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 116:Core/Src/freertos.c ****   /* add mutexes, ... */
 117:Core/Src/freertos.c ****   /* USER CODE END RTOS_MUTEX */
 118:Core/Src/freertos.c **** 
 119:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 120:Core/Src/freertos.c ****   /* add semaphores, ... */
 121:Core/Src/freertos.c ****   /* USER CODE END RTOS_SEMAPHORES */
 122:Core/Src/freertos.c **** 
 123:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 124:Core/Src/freertos.c ****   /* start timers, add new ones, ... */
 125:Core/Src/freertos.c ****   /* USER CODE END RTOS_TIMERS */
 126:Core/Src/freertos.c **** 
 127:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 128:Core/Src/freertos.c ****   /* add queues, ... */
 129:Core/Src/freertos.c ****   /* USER CODE END RTOS_QUEUES */
 130:Core/Src/freertos.c **** 
 131:Core/Src/freertos.c ****   /* Create the thread(s) */
 132:Core/Src/freertos.c ****   /* definition and creation of defaultTask */
 133:Core/Src/freertos.c ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 134:Core/Src/freertos.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 135:Core/Src/freertos.c **** 
 136:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_THREADS */
 137:Core/Src/freertos.c ****   /* add threads, ... */
 138:Core/Src/freertos.c ****   /* USER CODE END RTOS_THREADS */
 139:Core/Src/freertos.c **** 
ARM GAS  C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s 			page 4


 140:Core/Src/freertos.c **** }
 141:Core/Src/freertos.c **** 
 142:Core/Src/freertos.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 143:Core/Src/freertos.c **** /**
 144:Core/Src/freertos.c ****   * @brief  Function implementing the defaultTask thread.
 145:Core/Src/freertos.c ****   * @param  argument: Not used
 146:Core/Src/freertos.c ****   * @retval None
 147:Core/Src/freertos.c ****   */
 148:Core/Src/freertos.c **** /* USER CODE END Header_StartDefaultTask */
 149:Core/Src/freertos.c **** void StartDefaultTask(void const * argument)
 150:Core/Src/freertos.c **** {
  32              		.loc 1 150 1 view -0
  33              		.cfi_startproc
  34              		@ Volatile: function does not return.
  35              		@ args = 0, pretend = 0, frame = 0
  36              		@ frame_needed = 0, uses_anonymous_args = 0
  37              	.LVL0:
  38              		.loc 1 150 1 is_stmt 0 view .LVU1
  39 0000 08B5     		push	{r3, lr}
  40              	.LCFI0:
  41              		.cfi_def_cfa_offset 8
  42              		.cfi_offset 3, -8
  43              		.cfi_offset 14, -4
  44              	.LVL1:
  45              	.L2:
 151:Core/Src/freertos.c ****   /* USER CODE BEGIN StartDefaultTask */
 152:Core/Src/freertos.c ****   /* Infinite loop */
 153:Core/Src/freertos.c ****   for(;;)
  46              		.loc 1 153 3 is_stmt 1 discriminator 1 view .LVU2
 154:Core/Src/freertos.c ****   {
 155:Core/Src/freertos.c ****     osDelay(1);
  47              		.loc 1 155 5 discriminator 1 view .LVU3
  48 0002 0120     		movs	r0, #1
  49 0004 FFF7FEFF 		bl	osDelay
  50              	.LVL2:
 153:Core/Src/freertos.c ****   {
  51              		.loc 1 153 8 discriminator 1 view .LVU4
  52 0008 FBE7     		b	.L2
  53              		.cfi_endproc
  54              	.LFE153:
  56              		.section	.text.vApplicationStackOverflowHook,"ax",%progbits
  57              		.align	1
  58              		.weak	vApplicationStackOverflowHook
  59              		.syntax unified
  60              		.thumb
  61              		.thumb_func
  63              	vApplicationStackOverflowHook:
  64              	.LVL3:
  65              	.LFB149:
  72:Core/Src/freertos.c ****    /* Run time stack overflow checking is performed if
  66              		.loc 1 72 1 view -0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70              		@ link register save eliminated.
  76:Core/Src/freertos.c **** /* USER CODE END 4 */
  71              		.loc 1 76 1 view .LVU6
ARM GAS  C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s 			page 5


  72 0000 7047     		bx	lr
  73              		.cfi_endproc
  74              	.LFE149:
  76              		.section	.text.vApplicationGetIdleTaskMemory,"ax",%progbits
  77              		.align	1
  78              		.global	vApplicationGetIdleTaskMemory
  79              		.syntax unified
  80              		.thumb
  81              		.thumb_func
  83              	vApplicationGetIdleTaskMemory:
  84              	.LVL4:
  85              	.LFB150:
  84:Core/Src/freertos.c ****   *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  86              		.loc 1 84 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              		@ link register save eliminated.
  85:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
  91              		.loc 1 85 3 view .LVU8
  85:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
  92              		.loc 1 85 25 is_stmt 0 view .LVU9
  93 0000 034B     		ldr	r3, .L6
  94 0002 0360     		str	r3, [r0]
  86:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  95              		.loc 1 86 3 is_stmt 1 view .LVU10
  86:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  96              		.loc 1 86 27 is_stmt 0 view .LVU11
  97 0004 034B     		ldr	r3, .L6+4
  98 0006 0B60     		str	r3, [r1]
  87:Core/Src/freertos.c ****   /* place for user code */
  99              		.loc 1 87 3 is_stmt 1 view .LVU12
  87:Core/Src/freertos.c ****   /* place for user code */
 100              		.loc 1 87 25 is_stmt 0 view .LVU13
 101 0008 8023     		movs	r3, #128
 102 000a 1360     		str	r3, [r2]
  89:Core/Src/freertos.c **** /* USER CODE END GET_IDLE_TASK_MEMORY */
 103              		.loc 1 89 1 view .LVU14
 104 000c 7047     		bx	lr
 105              	.L7:
 106 000e 00BF     		.align	2
 107              	.L6:
 108 0010 00000000 		.word	.LANCHOR0
 109 0014 00000000 		.word	.LANCHOR1
 110              		.cfi_endproc
 111              	.LFE150:
 113              		.section	.text.vApplicationGetTimerTaskMemory,"ax",%progbits
 114              		.align	1
 115              		.global	vApplicationGetTimerTaskMemory
 116              		.syntax unified
 117              		.thumb
 118              		.thumb_func
 120              	vApplicationGetTimerTaskMemory:
 121              	.LVL5:
 122              	.LFB151:
  97:Core/Src/freertos.c ****   *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 123              		.loc 1 97 1 is_stmt 1 view -0
ARM GAS  C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s 			page 6


 124              		.cfi_startproc
 125              		@ args = 0, pretend = 0, frame = 0
 126              		@ frame_needed = 0, uses_anonymous_args = 0
 127              		@ link register save eliminated.
  98:Core/Src/freertos.c ****   *ppxTimerTaskStackBuffer = &xTimerStack[0];
 128              		.loc 1 98 3 view .LVU16
  98:Core/Src/freertos.c ****   *ppxTimerTaskStackBuffer = &xTimerStack[0];
 129              		.loc 1 98 26 is_stmt 0 view .LVU17
 130 0000 034B     		ldr	r3, .L9
 131 0002 0360     		str	r3, [r0]
  99:Core/Src/freertos.c ****   *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 132              		.loc 1 99 3 is_stmt 1 view .LVU18
  99:Core/Src/freertos.c ****   *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 133              		.loc 1 99 28 is_stmt 0 view .LVU19
 134 0004 034B     		ldr	r3, .L9+4
 135 0006 0B60     		str	r3, [r1]
 100:Core/Src/freertos.c ****   /* place for user code */
 136              		.loc 1 100 3 is_stmt 1 view .LVU20
 100:Core/Src/freertos.c ****   /* place for user code */
 137              		.loc 1 100 26 is_stmt 0 view .LVU21
 138 0008 4FF48073 		mov	r3, #256
 139 000c 1360     		str	r3, [r2]
 102:Core/Src/freertos.c **** /* USER CODE END GET_TIMER_TASK_MEMORY */
 140              		.loc 1 102 1 view .LVU22
 141 000e 7047     		bx	lr
 142              	.L10:
 143              		.align	2
 144              	.L9:
 145 0010 00000000 		.word	.LANCHOR2
 146 0014 00000000 		.word	.LANCHOR3
 147              		.cfi_endproc
 148              	.LFE151:
 150              		.section	.text.MX_FREERTOS_Init,"ax",%progbits
 151              		.align	1
 152              		.global	MX_FREERTOS_Init
 153              		.syntax unified
 154              		.thumb
 155              		.thumb_func
 157              	MX_FREERTOS_Init:
 158              	.LFB152:
 110:Core/Src/freertos.c ****   /* USER CODE BEGIN Init */
 159              		.loc 1 110 29 is_stmt 1 view -0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 32
 162              		@ frame_needed = 0, uses_anonymous_args = 0
 163 0000 10B5     		push	{r4, lr}
 164              	.LCFI1:
 165              		.cfi_def_cfa_offset 8
 166              		.cfi_offset 4, -8
 167              		.cfi_offset 14, -4
 168 0002 88B0     		sub	sp, sp, #32
 169              	.LCFI2:
 170              		.cfi_def_cfa_offset 40
 133:Core/Src/freertos.c ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 171              		.loc 1 133 3 view .LVU24
 172 0004 0DF1040C 		add	ip, sp, #4
 173 0008 074C     		ldr	r4, .L13
ARM GAS  C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s 			page 7


 174 000a 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 175 000c ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 176 0010 94E80700 		ldm	r4, {r0, r1, r2}
 177 0014 8CE80700 		stm	ip, {r0, r1, r2}
 134:Core/Src/freertos.c **** 
 178              		.loc 1 134 3 view .LVU25
 134:Core/Src/freertos.c **** 
 179              		.loc 1 134 23 is_stmt 0 view .LVU26
 180 0018 0021     		movs	r1, #0
 181 001a 01A8     		add	r0, sp, #4
 182 001c FFF7FEFF 		bl	osThreadCreate
 183              	.LVL6:
 134:Core/Src/freertos.c **** 
 184              		.loc 1 134 21 view .LVU27
 185 0020 024B     		ldr	r3, .L13+4
 186 0022 1860     		str	r0, [r3]
 140:Core/Src/freertos.c **** 
 187              		.loc 1 140 1 view .LVU28
 188 0024 08B0     		add	sp, sp, #32
 189              	.LCFI3:
 190              		.cfi_def_cfa_offset 8
 191              		@ sp needed
 192 0026 10BD     		pop	{r4, pc}
 193              	.L14:
 194              		.align	2
 195              	.L13:
 196 0028 00000000 		.word	.LANCHOR4
 197 002c 00000000 		.word	.LANCHOR5
 198              		.cfi_endproc
 199              	.LFE152:
 201              		.global	defaultTaskHandle
 202              		.section	.rodata
 203              		.align	2
 204              		.set	.LANCHOR4,. + 0
 205              	.LC2:
 206 0000 00000000 		.word	.LC0
 207 0004 00000000 		.word	StartDefaultTask
 208 0008 0000     		.short	0
 209 000a 0000     		.space	2
 210 000c 00000000 		.word	0
 211 0010 80000000 		.word	128
 212 0014 00000000 		.word	0
 213 0018 00000000 		.word	0
 214              		.section	.bss.defaultTaskHandle,"aw",%nobits
 215              		.align	2
 216              		.set	.LANCHOR5,. + 0
 219              	defaultTaskHandle:
 220 0000 00000000 		.space	4
 221              		.section	.bss.xIdleStack,"aw",%nobits
 222              		.align	2
 223              		.set	.LANCHOR1,. + 0
 226              	xIdleStack:
 227 0000 00000000 		.space	512
 227      00000000 
 227      00000000 
 227      00000000 
 227      00000000 
ARM GAS  C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s 			page 8


 228              		.section	.bss.xIdleTaskTCBBuffer,"aw",%nobits
 229              		.align	2
 230              		.set	.LANCHOR0,. + 0
 233              	xIdleTaskTCBBuffer:
 234 0000 00000000 		.space	84
 234      00000000 
 234      00000000 
 234      00000000 
 234      00000000 
 235              		.section	.bss.xTimerStack,"aw",%nobits
 236              		.align	2
 237              		.set	.LANCHOR3,. + 0
 240              	xTimerStack:
 241 0000 00000000 		.space	1024
 241      00000000 
 241      00000000 
 241      00000000 
 241      00000000 
 242              		.section	.bss.xTimerTaskTCBBuffer,"aw",%nobits
 243              		.align	2
 244              		.set	.LANCHOR2,. + 0
 247              	xTimerTaskTCBBuffer:
 248 0000 00000000 		.space	84
 248      00000000 
 248      00000000 
 248      00000000 
 248      00000000 
 249              		.text
 250              	.Letext0:
 251              		.file 2 "d:\\rm\\arm-gnu-toolchian\\arm-none-eabi\\include\\machine\\_default_types.h"
 252              		.file 3 "d:\\rm\\arm-gnu-toolchian\\arm-none-eabi\\include\\sys\\_stdint.h"
 253              		.file 4 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 254              		.file 5 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 255              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 256              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
ARM GAS  C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s 			page 9


DEFINED SYMBOLS
                            *ABS*:00000000 freertos.c
C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s:16     .rodata.str1.4:00000000 $d
C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s:23     .text.StartDefaultTask:00000000 $t
C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s:29     .text.StartDefaultTask:00000000 StartDefaultTask
C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s:57     .text.vApplicationStackOverflowHook:00000000 $t
C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s:63     .text.vApplicationStackOverflowHook:00000000 vApplicationStackOverflowHook
C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s:77     .text.vApplicationGetIdleTaskMemory:00000000 $t
C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s:83     .text.vApplicationGetIdleTaskMemory:00000000 vApplicationGetIdleTaskMemory
C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s:108    .text.vApplicationGetIdleTaskMemory:00000010 $d
C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s:114    .text.vApplicationGetTimerTaskMemory:00000000 $t
C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s:120    .text.vApplicationGetTimerTaskMemory:00000000 vApplicationGetTimerTaskMemory
C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s:145    .text.vApplicationGetTimerTaskMemory:00000010 $d
C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s:151    .text.MX_FREERTOS_Init:00000000 $t
C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s:157    .text.MX_FREERTOS_Init:00000000 MX_FREERTOS_Init
C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s:196    .text.MX_FREERTOS_Init:00000028 $d
C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s:219    .bss.defaultTaskHandle:00000000 defaultTaskHandle
C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s:203    .rodata:00000000 $d
C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s:215    .bss.defaultTaskHandle:00000000 $d
C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s:222    .bss.xIdleStack:00000000 $d
C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s:226    .bss.xIdleStack:00000000 xIdleStack
C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s:229    .bss.xIdleTaskTCBBuffer:00000000 $d
C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s:233    .bss.xIdleTaskTCBBuffer:00000000 xIdleTaskTCBBuffer
C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s:236    .bss.xTimerStack:00000000 $d
C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s:240    .bss.xTimerStack:00000000 xTimerStack
C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s:243    .bss.xTimerTaskTCBBuffer:00000000 $d
C:\Users\blue\AppData\Local\Temp\ccW7sREZ.s:247    .bss.xTimerTaskTCBBuffer:00000000 xTimerTaskTCBBuffer

UNDEFINED SYMBOLS
osDelay
osThreadCreate
